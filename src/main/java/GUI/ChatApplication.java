/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Client.Client;
import Constants.env;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

/**
 *
 * @author Admin
 */
public class ChatApplication extends javax.swing.JFrame {

    /**
     * Creates new form ChatApplication
     */
    private Client client;
    public ChatApplication() {
        initComponents();
    }

    ChatApplication(Client client) {
        this.client = client;
        client.setChatApp(this);
        initComponents();
        bindEnterForMessage();
        bindClickForOnline();
        bindClickForAnchor();
    }

    private void submitText() {
        String receiver = onlineList.getSelectedValue();
        String message = messageArea.getText();
        if (!message.equals("") && message!=null){
            client.sendPrivateMessage(message, receiver);
            messageArea.setText("");
        }
    }

    public JProgressBar getUploadProgress() {
        return uploadProgress;
    }

    public void setUploadProgress(JProgressBar uploadProgress) {
        this.uploadProgress = uploadProgress;
    }
    
    public JTextPane getChatHistoryArea() {
        return chatHistoryArea;
    }

    public JLabel getUserInfoLabel() {
        return userInfoLabel;
    }

    public void setUserInfoLabel(JLabel userInfoLabel) {
        this.userInfoLabel = userInfoLabel;
    }

    public void setChatHistoryArea(JTextPane chatHistoryArea) {
        this.chatHistoryArea = chatHistoryArea;
    }

    public JScrollPane getChatHistoryScroll() {
        return chatHistoryScroll;
    }

    public void setChatHistoryScroll(JScrollPane chatHistoryScroll) {
        this.chatHistoryScroll = chatHistoryScroll;
    }

    public JList<String> getFileList() {
        return fileList;
    }

    public void setFileList(JList<String> fileList) {
        this.fileList = fileList;
    }

    public JTextArea getMessageArea() {
        return messageArea;
    }

    public void setMessageArea(JTextArea messageArea) {
        this.messageArea = messageArea;
    }

    public JList<String> getOnlineList() {
        return onlineList;
    }

    public void setOnlineList(JList<String> onlineList) {
        this.onlineList = onlineList;
    }

    public JButton getUploadBtn() {
        return uploadBtn;
    }

    public void setUploadBtn(JButton uploadBtn) {
        this.uploadBtn = uploadBtn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverInfoLabel = new javax.swing.JLabel();
        userInfoLabel = new javax.swing.JLabel();
        onlineScroll = new javax.swing.JScrollPane();
        onlineList = new javax.swing.JList<>();
        fileListLabel = new javax.swing.JLabel();
        fileScroll = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        disconnectBtn = new javax.swing.JButton();
        downBtn = new javax.swing.JButton();
        chatHistoryScroll = new javax.swing.JScrollPane();
        chatHistoryArea = new javax.swing.JTextPane();
        messageScroll = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        sendBtn = new javax.swing.JButton();
        uploadBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        uploadProgress = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chat Application");
        setResizable(false);

        serverInfoLabel.setText("Host: "+client.getClientSocket().getInetAddress().getHostAddress()+":"+client.getClientSocket().getPort());

        onlineList.setModel(new DefaultListModel<>()
        );
        onlineScroll.setViewportView(onlineList);

        fileListLabel.setText("File list:");

        fileList.setModel(new DefaultListModel<>());
        fileScroll.setViewportView(fileList);

        disconnectBtn.setText("Disconnect");
        disconnectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectBtnActionPerformed(evt);
            }
        });

        downBtn.setText("Download");

        chatHistoryArea.setEditable(false);
        chatHistoryArea.setContentType("text/html");
        chatHistoryScroll.setViewportView(chatHistoryArea);

        messageArea.setColumns(20);
        messageArea.setRows(5);
        messageScroll.setViewportView(messageArea);

        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        uploadBtn.setText("Upload");
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Online users:");

        jLabel2.setText("Upload/Download:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(downBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(onlineScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                    .addComponent(fileScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(serverInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uploadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(userInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chatHistoryScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uploadProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serverInfoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addComponent(disconnectBtn))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(onlineScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fileListLabel)
                            .addComponent(downBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(chatHistoryScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(uploadProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sendBtn)
                                .addGap(18, 18, 18)
                                .addComponent(uploadBtn))
                            .addComponent(messageScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectBtnActionPerformed
        client.disconnect();
        this.dispose();
    }//GEN-LAST:event_disconnectBtnActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        // TODO add your handling code here:
        submitText();
    }//GEN-LAST:event_sendBtnActionPerformed

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtnActionPerformed
        // TODO add your handling code here:
        if (onlineList.getSelectedIndex()==-1){
            JOptionPane.showConfirmDialog(null, "Please select a user to send file", "Fail", JOptionPane.DEFAULT_OPTION);
            return;
        }
        JFileChooser fc = new JFileChooser();
        int option = fc.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION){
            client.uploadFile(fc.getSelectedFile());
        }
    }//GEN-LAST:event_uploadBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane chatHistoryArea;
    private javax.swing.JScrollPane chatHistoryScroll;
    private javax.swing.JButton disconnectBtn;
    private javax.swing.JButton downBtn;
    private javax.swing.JList<String> fileList;
    private javax.swing.JLabel fileListLabel;
    private javax.swing.JScrollPane fileScroll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JScrollPane messageScroll;
    private javax.swing.JList<String> onlineList;
    private javax.swing.JScrollPane onlineScroll;
    private javax.swing.JButton sendBtn;
    private javax.swing.JLabel serverInfoLabel;
    private javax.swing.JButton uploadBtn;
    private javax.swing.JProgressBar uploadProgress;
    private javax.swing.JLabel userInfoLabel;
    // End of variables declaration//GEN-END:variables

    private void bindEnterForMessage() {
        InputMap input = messageArea.getInputMap();
        KeyStroke enter = KeyStroke.getKeyStroke("ENTER");
        KeyStroke shiftEnter = KeyStroke.getKeyStroke("shift ENTER");
        input.put(shiftEnter, env.INSERT_BREAK); 
        input.put(enter, env.TEXT_SUBMIT);

        ActionMap actions = messageArea.getActionMap();
        actions.put(env.TEXT_SUBMIT, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                submitText();
            }
        });
    }

    private void bindClickForOnline() {
        onlineList.addListSelectionListener((e) -> {
            String target = onlineList.getSelectedValue();
            client.loadChat(target);
        });
    }

    private void bindClickForAnchor() {
        chatHistoryArea.addHyperlinkListener((HyperlinkEvent e) -> {
            if (HyperlinkEvent.EventType.ACTIVATED.equals(e.getEventType())) {
                System.out.println(e.getDescription());
            }
        });
    }
}
